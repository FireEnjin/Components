// GENERATED BY MITOSIS

import {
  Fragment,
  Slot,
  component$,
  h,
  useCleanup$,
  useClientEffect$,
  useRef,
  useStore,
} from "@builder.io/qwik";
export const onInput = function onInput(props, state, formRef, event) {
  void (async function () {
    const saveCache = async function () {
      localStorage.setItem(props?.cacheKey, JSON.stringify(props?.formData));
    };
    const setFilteredValue = async function (key, value) {
      let newValue = value;
      for (const filter of typeof props?.filterData === "string"
        ? props?.filterData.split(",")
        : props?.filterData) {
        if (typeof filter !== "function") continue;
        const filterName =
          Object.getOwnPropertyDescriptors(filter)?.name?.value;
        if (!filterName || filterName !== key) continue;
        newValue = await filter(value);
      }
      return newValue;
    };
    const setByPath = function (obj, path, value) {
      const pList = path.split(".");
      const len = pList.length;
      for (let i = 0; i < len - 1; i++) {
        const nextElemIsArray = !isNaN(parseInt(pList[i + 1]));
        const elem = pList[i];
        if (!obj[elem]) obj[elem] = nextElemIsArray ? [] : {};
        obj = obj[elem];
      }
      obj[pList[len - 1]] = value;
      return obj;
    };
    if (!event?.target?.name?.startsWith?.("ion-")) {
      const value =
        typeof event?.detail?.checked === "boolean"
          ? event.detail.checked
          : event?.detail?.value || event?.target?.value;
      setByPath(
        state?.formData || {},
        event?.target?.name,
        props?.filterData?.length
          ? await setFilteredValue(event?.target?.name, value)
          : value
      );
      if (props.cacheKey) await saveCache();
      if (!state?.hasChanged) {
        state.hasChanged = true;
      }
    }
  })();
};
export const submit = function submit(props, state, formRef, event) {
  (event?.target || document).dispatchEvent(
    new CustomEvent("fireenjinSubmit", {
      bubbles: true,
      detail: {
        event,
        endpoint: props?.action,
        data: state?.formData || null,
      },
    })
  );
};
export const Form = component$((props) => {
  const formRef = useRef();
  const state = useStore({
    eventListeners: [
      "ionInput",
      "ionChange",
      "ionSelect",
      "input",
      "change",
      "fireenjinCodeChange",
    ],
    formData: {},
    hasChanged: false,
    resetButton: "Clear",
    resetButtonColor: "grey",
    resetButtonFill: "solid",
    resetButtonRadius: "md",
    submitButton: "Save",
    submitButtonColor: "blue",
    submitButtonFill: "solid",
    submitButtonRadius: "md",
  });
  useClientEffect$(() => {
    if (props.formData) state.formData = props.formData;
    if (props.eventListeners) state.eventListeners = props.eventListeners;
    state.submitButton = props?.submitButton ?? "Save";
    state.submitButtonColor = props?.submitButtonColor || "blue";
    state.submitButtonFill = props?.submitButtonFill || "solid";
    state.submitButtonRadius = props?.submitButtonRadius || "md";
    state.resetButton = props?.resetButton ?? "Clear";
    state.resetButtonColor = props?.resetButtonColor || "grey";
    state.resetButtonFill = props?.resetButtonFill || "solid";
    state.resetButtonRadius = props?.submitButtonRadius || "md";
    const ref =
      (formRef?.addEventListener && formRef) ||
      (formRef?.current?.addEventListener && formRef.current);
    if (ref?.addEventListener)
      state.eventListeners.map((eventName) =>
        ref.addEventListener(
          eventName,
          onInput.bind(null, props, state, formRef).bind(this)
        )
      );
  });
  useCleanup$(() => {
    const ref =
      (formRef?.addEventListener && formRef) ||
      (formRef?.current?.addEventListener && formRef.current);
    (props?.eventListeners || []).map((eventName) =>
      ref.removeEventListener(
        eventName,
        onInput.bind(null, props, state, formRef).bind(this)
      )
    );
  });
  return (
    <form
      preventdefault:submit=""
      ref={formRef}
      onSubmit$={(event) => {
        event.preventDefault();
        submit(props, state, formRef, event);
      }}
      action={props?.action}
      method={props?.method}
    >
      <Slot></Slot>
      {!props.hideControls ? (
        <div
          class="form-controls"
          style={{
            display: "flex",
            justifyContent: "space-between",
          }}
        >
          {state.resetButton ? (
            <button
              type="reset"
              style={{
                cursor: "pointer",
                fontFamily: "inherit",
                fontSize:
                  (props?.resetButtonSize === "large" && "2rem") ||
                  (props?.resetButtonSize === "small" && "1.1rem") ||
                  "1.2rem",
                textDecoration: "none",
                color:
                  state.resetButtonFill !== "solid"
                    ? `var(--color-${state.resetButtonColor})`
                    : "#ffffff",
                display: "inline-flex",
                gap: "8px",
                alignItems: "center",
                border:
                  state.resetButtonFill === "outline"
                    ? `1px solid var(--color-${state.resetButtonColor})`
                    : "none",
                background:
                  state.resetButtonFill !== "solid"
                    ? "none"
                    : `var(--color-${state.resetButtonColor})`,
                padding:
                  (props?.resetButtonSize === "large" &&
                    "var(--size-2) var(--size-5)") ||
                  (props?.resetButtonSize === "small" &&
                    "var(--size-px) var(--size-2)") ||
                  "var(--size-1) var(--size-4)",
                borderRadius:
                  (state?.resetButtonRadius === "none" && "none") ||
                  `var(--radius-${state?.resetButtonRadius || ""})`,
                boxShadow:
                  (state.resetButtonFill !== "solid" && "none") ||
                  (props?.resetButtonSize === "large" && "var(--shadow-md)") ||
                  (props?.resetButtonSize === "small" && "var(--shadow-xs)") ||
                  "var(--shadow-sm)",
              }}
            >
              {state.resetButton}
            </button>
          ) : null}
          {state.submitButton ? (
            <button
              type="submit"
              style={{
                cursor: "pointer",
                fontFamily: "inherit",
                fontSize:
                  (props?.submitButtonSize === "large" && "2rem") ||
                  (props?.submitButtonSize === "small" && "1.1rem") ||
                  "1.2rem",
                textDecoration: "none",
                color:
                  state.submitButtonFill !== "solid"
                    ? `var(--color-${state.submitButtonColor})`
                    : "#ffffff",
                display: "inline-flex",
                gap: "8px",
                alignItems: "center",
                border:
                  state.submitButtonFill === "outline"
                    ? `1px solid var(--color-${state.submitButtonColor})`
                    : "none",
                background:
                  state.submitButtonFill !== "solid"
                    ? "none"
                    : `var(--color-${state.submitButtonColor})`,
                padding:
                  (props?.submitButtonSize === "large" &&
                    "var(--size-2) var(--size-5)") ||
                  (props?.submitButtonSize === "small" &&
                    "var(--size-px) var(--size-2)") ||
                  "var(--size-1) var(--size-4)",
                borderRadius:
                  (state?.submitButtonRadius === "none" && "none") ||
                  `var(--radius-${state?.submitButtonRadius || ""})`,
                boxShadow:
                  (state.submitButtonFill !== "solid" && "none") ||
                  (props?.submitButtonSize === "large" && "var(--shadow-md)") ||
                  (props?.submitButtonSize === "small" && "var(--shadow-xs)") ||
                  "var(--shadow-sm)",
              }}
            >
              {state.submitButton}
            </button>
          ) : null}
        </div>
      ) : null}
    </form>
  );
});
export default Form;
