// GENERATED BY MITOSIS

import {
  Fragment,
  Slot,
  component$,
  h,
  useClientEffect$,
  useRef,
  useStore,
} from "@builder.io/qwik";
export const Form = component$((props) => {
  const formRef = useRef();
  const state = useStore({ formData: {}, hasChanged: false });
  useClientEffect$(() => {
    const setByPath = function (obj, path, value) {
      const pList = path.split(".");
      const len = pList.length;
      for (let i = 0; i < len - 1; i++) {
        const elem = pList[i];
        if (!obj[elem]) obj[elem] = {};
        obj = obj[elem];
      }
      obj[pList[len - 1]] = value;
      return obj;
    };
    const saveCache = async function () {
      localStorage.setItem(props?.cacheKey, JSON.stringify(props?.formData));
    };
    const setFilteredValue = async function (key, value) {
      let newValue = value;
      for (const filter of typeof props?.filterData === "string"
        ? props?.filterData.split(",")
        : props?.filterData) {
        if (typeof filter !== "function") continue;
        const filterName =
          Object.getOwnPropertyDescriptors(filter)?.name?.value;
        if (!filterName || filterName !== key) continue;
        newValue = await filter(value);
      }
      return newValue;
    };
    const onInput = async function (event) {
      console.log(event);
      if (!event?.target?.name?.startsWith?.("ion-")) {
        const value =
          typeof event?.detail?.checked === "boolean"
            ? event.detail.checked
            : event?.detail?.value || event?.target?.value;
        state.formData = setByPath(
          state?.formData || {},
          event?.target?.name,
          props?.filterData?.length
            ? await setFilteredValue(event?.target?.name, value)
            : value
        );
        if (props.cacheKey) await saveCache();
        if (!state?.hasChanged) {
          state.hasChanged = true;
        }
      }
    };
    if (formRef?.addEventListener) {
      ["ionInput", "ionChange", "ionSelect", "input", "change"].map(
        (eventName) => formRef.addEventListener(eventName, onInput)
      );
    }
  });
  return (
    <form ref={formRef} action={props?.action} method={props?.method}>
      <Slot></Slot>
    </form>
  );
});
export default Form;
