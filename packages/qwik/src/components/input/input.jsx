// GENERATED BY MITOSIS

import {
  Fragment,
  component$,
  h,
  useRef,
  useStore,
  useStylesScoped$,
} from "@builder.io/qwik";
export const onChange = function onChange(props, state, inputRef, event) {
  console.log("change", event);
};
export const onInput = function onInput(props, state, inputRef, event) {
  console.log("input", event);
};
export const Input = component$((props) => {
  useStylesScoped$(STYLES);
  const inputRef = useRef();
  const state = useStore({ value: props?.value });
  return (
    <div
      class="input-wrapper"
      style={{
        display: props?.labelPosition !== "stacked" ? "flex" : "block",
      }}
    >
      {props?.label ? (
        <label htmlFor={props?.for || props?.name || props?.label}>
          {props.label}
        </label>
      ) : null}
      <input
        class="input-Input"
        id={props?.for || props?.name || props?.label}
        name={props?.name}
        accept={props?.accept}
        value={props?.value}
        checked={props?.checked}
        form={props?.form}
        formaction={props?.formaction}
        formenctype={props?.formenctype}
        formmethod={props?.formmethod}
        formnovalidate={props?.formnovalidate}
        formtarget={props?.formtarget}
        height={props?.height}
        alt={props?.alt}
        list={props?.list}
        max={props?.max}
        min={props?.min}
        maxlength={props?.maxlength}
        multiple={props?.multiple}
        pattern={props?.pattern}
        ref={inputRef}
        placeholder={props?.placeholder}
        readonly={props?.readonly}
        size={props?.size}
        src={props?.src}
        step={props?.step}
        type={props?.type || "text"}
        width={props?.width}
      ></input>
    </div>
  );
});
export default Input;
export const STYLES = `
.input-Input {
  display: var(--input-display, block);
  background: var(--input-background, transparent);
  border: var(--input-border, none);
  box-shadow: var(--input-box-shadow, none);
}.input-Input:active {
  border: var(--input-active-border, var(--input-border, none));
}.input-Input:focus {
  border: var(--input-focus-border, var(--input-border, none));
  border-color: inherit;
  webkit-box-shadow: var(--input-focus-box-shadow, var(--input-box-shadow, none));
  box-shadow: var(--input-focus-box-shadow, var(--input-box-shadow, none));
  outline: var(--input-focus-outline, var(--input-border, none));
}.input-Input:hover {
  border: var(--input-hover-border, var(--input-border, none));
}`;
